swagger: '2.0'
info:
  title: JTHub Job Execution Scheduling Service API
  version: "0.1"
consumes:
  - application/json
produces:
  - application/json
security:
  # enable OAuth protection for all REST endpoints
  # (only active if the TOKENINFO_URL environment variable is set)
  - oauth2: [uid]
paths:
  /queues/owner/{owner_name}/queue/{queue_id}:
    get:
      tags: [Queues]
      operationId: app.get_queues4
      summary: Get info for job queue under a given owner and queue_id
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
      responses:
        200:
          description: Return job queues for the specified owner
          schema:
            type: array
  /queues/owner/{owner_name}:
    get:
      tags: [Queues]
      operationId: app.get_queues1
      summary: Get all job queues under a given owner
      parameters:
        - $ref: '#/parameters/owner_name'
      responses:
        200:
          description: Return Queues for the specified owner
          schema:
            type: array
  /queues/owner/{owner_name}/workflow/{workflow_name}:
    get:
      tags: [Queues]
      operationId: app.get_queues2
      summary: Get all job queues under a given owner and workflow_name
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
      responses:
        200:
          description: Return job queues for a given owner and workflow_name
          schema:
            type: array
  /queues/owner/{owner_name}/workflow/{workflow_name}/ver/{workflow_version}:
    get:
      tags: [Queues]
      operationId: app.get_queues
      summary: Get all job queues for given owner, workflow_name and version
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
      responses:
        200:
          description: Return job queues for the specified owner
          schema:
            type: array
    post:
      tags: [Queues]
      operationId: app.register_queue1
      summary: Register a job queue under a given owner, workflow_name and version
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/workflow_name'
        - $ref: '#/parameters/workflow_version'
        - name: queue
          in: body
          schema:
            $ref: '#/definitions/JobQueue'
      responses:
        200:
          description: Workflow created
          schema:
            $ref: '#/definitions/JobQueue'
        409:
          description: Workflow registration failed
  /queues/id/{queue_id}:
    get:
      tags: [Queues]
      operationId: app.get_queues3
      summary: Get job queue info by job queue ID
      parameters:
        - $ref: '#/parameters/queue_id'
      responses:
        204:
          description: Action performed
  /queues/id/{queue_id}/action:
    put:
      tags: [Queues]
      operationId: app.queue_action
      summary: Perform an action on a job queue, eg, pause, resume
      parameters:
        - $ref: '#/parameters/queue_id'
        - name: action
          in: body
          required: true
          schema:
            $ref: '#/definitions/JobQueueAction'
      responses:
        204:
          description: Action performed
  /jobs/owner/{owner_name}/queue/{queue_id}:
    get:
      tags: [Jobs]
      operationId: app.get_jobs
      summary: Get jobs in a job queue
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - name: state
          type: string
          in: query
          enum: ['queued', 'running', 'completed', 'failed', 'paused']
      responses:
        200:
          description: Return jobs
    post:
      tags: [Jobs]
      operationId: app.enqueue_job
      summary: Enqueue a job in a given job queue
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - name: jobjson
          in: body
          schema:
            $ref: '#/definitions/JobJSON'
      responses:
        200:
          description: Job enqueued
          schema:
            $ref: '#/definitions/JobJSON'
        409:
          description: Job enqueueing failed
  /jobs/owner/{owner_name}/queue/{queue_id}/executor/{executor_id}:
    get:
      tags: [Jobs]
      operationId: app.get_jobs_by_executor
      summary: Get jobs in a job queue assigned to an executor
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/executor_id'
        - name: state
          type: string
          in: query
          enum: ['running', 'completed', 'failed', 'paused']  # 'queued' can not be assigned to an executor
      responses:
        200:
          description: Return jobs
  /jobs/owner/{owner_name}/queue/{queue_id}/summary:
    get:
      tags: [Jobs]
      operationId: app.get_job_summary
      summary: Get summary information on jobs in a job queue
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - name: state
          type: string
          in: query
          enum: ['queued', 'running', 'completed', 'failed', 'paused']
      responses:
        200:
          description: Return jobs
  /jobs/owner/{owner_name}/queue/{queue_id}/job/{job_id}:
    get:
      tags: [Jobs]
      operationId: app.get_job
      summary: Get detail for a given job
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - name: job_id
          in: path
          type: string
          required: true
          pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        - name: state
          type: string
          in: query
          enum: ['queued', 'running', 'completed', 'failed', 'paused']
      responses:
        200:
          description: Return job
  /jobs/owner/{owner_name}/queue/{queue_id}/job/{job_id}/action:
    put:
      tags: [Jobs]
      operationId: app.job_action
      summary: Perform an action on a job, eg, pause, resume, cancel ...
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/job_id'
        - name: action
          in: body
          required: true
          schema:
            $ref: '#/definitions/JobAction'
      responses:
        204:
          description: Action performed
  /executors/owner/{owner_name}:
    get:
      tags: [Executors]
      operationId: app.get_executors1
      summary: Get executors registered for an owner
      parameters:
        - $ref: '#/parameters/owner_name'
      responses:
        200:
          description: Return executors
  /executors/owner/{owner_name}/executor/{executor_id}:
    get:
      tags: [Executors]
      operationId: app.get_executors2
      summary: Get executor by executor ID registered for an owner
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/executor_id'
      responses:
        200:
          description: Return executors
  /executors/owner/{owner_name}/queue/{queue_id}:
    get:
      tags: [Executors]
      operationId: app.get_executors
      summary: Get executors registered for a job queue
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
      responses:
        200:
          description: Return executors
    post:
      tags: [Executors]
      operationId: app.register_executor
      summary: Register a executor for a job queue
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - name: executor
          in: body
          schema:
            $ref: '#/definitions/Executor'
      responses:
        200:
          description: Executor registered
  /executors/owner/{owner_name}/queue/{queue_id}/executor/{executor_id}:
    get:
      tags: [Executors]
      operationId: app.get_executor
      summary: Get detail of a given executor registered for a job queue
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/executor_id'
      responses:
        200:
          description: Return executor
          schema:
            $ref: '#/definitions/Executor'
  /executors/owner/{owner_name}/queue/{queue_id}/executor/{executor_id}/action:
    put:
      tags: [Executors]
      operationId: app.executor_action
      summary: Perform an action on a executor, eg, pause, resume
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/executor_id'
        - name: action
          in: body
          required: true
          schema:
            $ref: '#/definitions/ExecutorAction'
      responses:
        204:
          description: Action performed
  /tasks/owner/{owner_name}/queue/{queue_id}/job/{job_id}:  # may not need this, get job should be sufficient
    get:
      tags: [Tasks]
      operationId: app.get_tasks
      summary: List all tasks for a given job
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/job_id'
      responses:
        200:
          description: Return tasks
  /tasks/owner/{owner_name}/queue/{queue_id}/executor/{executor_id}/next_task:
    get:
      tags: [Tasks]
      operationId: app.next_task
      summary: Executor asks for the next task to run
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/executor_id'
        - name: job_id
          in: query
          type: string
        - name: job_state
          in: query
          type: string
          enum: ['running', 'queued']
      responses:
        204:
          description: Task assigned
        404:
          description: No task to run
  /tasks/owner/{owner_name}/queue/{queue_id}/job/{job_id}/task/{task_name}/task_complete:
    put:
      tags: [Tasks]
      operationId: app.complete_task
      summary: Executor reports completion of a task
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/job_id'
        - $ref: '#/parameters/task_name'
        - name: result
          required: true
          in: body
          schema:
            type: object
      responses:
        204:
          description: Action performed
  /tasks/owner/{owner_name}/queue/{queue_id}/job/{job_id}/task/{task_name}/task_fail:
    put:
      tags: [Tasks]
      operationId: app.fail_task
      summary: Executor reports failure of a task
      parameters:
        - $ref: '#/parameters/owner_name'
        - $ref: '#/parameters/queue_id'
        - $ref: '#/parameters/job_id'
        - $ref: '#/parameters/task_name'
        - name: result
          required: true
          in: body
          schema:
            type: object
      responses:
        204:
          description: Action performed

parameters:
  owner_name:
    name: owner_name
    description: Owner's unique name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
  workflow_name:
    name: workflow_name
    description: Workflow's name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_.]{2,31}$"
  workflow_version:
    name: workflow_version
    description: Workflow's version
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{1,15}$"
  job_id:
    name: job_id
    description: Unique ID for a job
    in: path
    type: string
    required: true
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  queue_id:
    name: queue_id
    description: Unique ID for a job queue
    in: path
    type: string
    required: true
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  executor_id:
    name: executor_id
    description: Unique ID for a executor
    in: path
    type: string
    required: true
    pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
  job_name:
    name: job_name
    description: Job's name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{2,63}$"
  task_name:
    name: task_name
    description: Task's name
    in: path
    type: string
    required: true
    pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{2,255}$"


definitions:
  JobQueue:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z]{1}[a-zA-Z0-9-_]{2,31}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 32
      workflow_type:
        type: string
        description: In which language workflow is written
        enum: ["JTracker"]
        example: "JTracker"
        readOnly: true
      tags:
        type: object
        description: Custom tags
      created:
        type: string
        format: date-time
        description: Creation time
        example: "2015-07-07T15:49:51.230+02:00"
        readOnly: true
  JobJSON:
    type: object
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{2,63}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 64
  TaskFile:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9]{1}[a-zA-Z0-9-_.]{2,255}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 256
  Executor:
    type: object
    required:
      - id
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
  JobQueueAction:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9-_]{3,35}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 35
  ExecutorAction:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9-_]{3,35}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 35
  JobAction:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9-_]{3,35}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 35
  TaskAction:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        description: Workflow's unique identifier
        pattern: "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
        example: "7ebf7fa9-f70f-481a-a499-5fba3f8c5078"
        readOnly: true
      name:
        type: string
        description: Workflow's name
        pattern: "^[a-zA-Z0-9-_]{3,35}$"
        example: "BWA-MEM"
        minLength: 3
        maxLength: 35

securityDefinitions:
  oauth2:
    type: oauth2
    flow: implicit
    authorizationUrl: https://example.com/oauth2/dialog
    scopes:
      uid: Unique identifier of the user accessing the service.
